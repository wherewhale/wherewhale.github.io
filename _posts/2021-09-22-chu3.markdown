---
layout: post
title: "[추석맞이 코딩챌린지③] 블랙잭"
date: 2021-09-22 13:27:35 +0900
categories: Algorithm
---

---

<span style="color:#5CD1E5">본 글은 네이버 카페 코뮤니티에서 주최한 코딩챌린지 참여 글입니다.</span>
<br>
Naver 카페 [코뮤니티][link]
<br>
<br>
첫 번째 문제 : [[추석맞이 코딩챌린지①] 피보나치수][link1]
<br>
두 번째 문제 : [[추석맞이 코딩챌린지②] 정상 정복][link2]

[link]: https://cafe.naver.com/codeuniv/44736 "코뮤니티"
[link1]: https://wherewhale.github.io/algorithm/2021/09/19/chu1.html "피보나치수"
[link2]: https://wherewhale.github.io/algorithm/2021/09/19/chu2.html "정상 정복"

# 1. Blackjack

<br>

세 번째 풀이 글입니다. :)
<br>

> 카지노에서 자주 플레이되는 블랙잭의 규칙은 카드의 합이 21이 넘지 않는 한도 내에서, 카드의 합을 가장 크게 만드는 게임이다.
> <br>이와 유사하게, 코드메이트 버전의 블랙잭은 N개의 카드중 세장의 카드를 뽑아 X를 넘지 않으면서 X와 가장 가까운 수의 카드조합을 골라내는 규칙으로 진행된다.
> <br>

​

## 어떤 알고리즘이 필요할까?

탐색?

> **1. 선형탐색 알고리즘 (Linear Search Algorithm)** <br> <img src="/assets/image/black1.png" width="50%" title="선형 탐색" alt="선형 탐색"/>

- 앞 혹은 뒤부터 차례대로 찾아보는 알고리즘
- 가장 쉽고 간단한 탐색 알고리즘

<br>
<br>
말 그대로, 값을 차례대로 확인해보며 원하는 값이 나올 때까지 찾는 알고리즘입니다.
<br>
가장 먼저 생각한 것으로, 세 가지의 값을 더해야하므로, 반복문을 사용해야하나... 고민을 해보았습니다.
<br>
3중 포문이라니 ㅠㅠㅠ 프로세서가 고통받을 생각을 하니 가슴이 아려왔습니다.
<br>
<br>

> **2. 이진 탐색 알고리즘 (Binary Search Algorithm)** <br> <img src="/assets/image/black2.png" width="50%" title="이진 탐색" alt="이진 탐색"/>

- 중간 지점을 확인하여 이를 기준으로 비교하는 알고리즘
- 원하는 값에 가까운 반을 남기고, 다시 중간지점을 선택하여 반복

<br>
<br>
중간값을 계속적으로 확인하며, 목표값에 다가가는 알고리즘입니다.
<br>
> ***"그래! 원하는 목표값이니, 중간이 더 가깝지 않을까?"***
<br>

라는 바보같은 생각을 했습니다. 제가 간과한거죠...
<br>
우리는 결국 모든 값을 다 계산하여 정렬해야 이진탐색을 사용할 수 있습니다.
<br>
즉, 값을 계산하기 가장 편한 순차로 값을 조합해보며 확인해보는 방법이었습니다.
<br>
<br>
<span style="color: gray; text-decoration : line-through">
고멘네... CPU...
</span>
<br>
<br>

# 2. 정답 코드

이번 알고리즘에서 제가 최선으로 할 수 있는 것은
<br>
**공간복잡도를 최대한 줄이고 짧게 코딩하는 것!**
<br>
<br>
이것에 초점을 맞추고 풀어보았습니다. 코드 함께 보시죠 :)

```c
#include <stdio.h>
#include <stdlib.h>

int main(void) {
    int N = 0, M = 0;
    int sum = 0, dif = -1, result = 0;
    int *arr = 0;

    scanf("%d %d", &N, &M);
    arr = (int *)malloc(sizeof(int) * N);
    for (int i = 0; i < N; i++) {
        scanf("%d", &arr[i]);
    }

    for (int i = 0; i < N; i++) {
        for (int j = i+1; j < N; j++) {
            for (int k = j+1; k < N; k++) {
                sum = arr[i] + arr[j] + arr[k];
                if (sum <= M) {
                    if (dif == -1 || dif > M - sum) {
                        dif = M - sum;
                        result = sum;
                    }
                }
            }
        }
    }

    printf("%d\n", result);

    free(arr);
    return 0;
}


```

<br>
이번 코드의 시간복잡도는 부끄러운 정도이기 때문에,,, 따로 계산하진 않겠습니다...
<br>
다른 방법이 있다면 꼭 보고싶군요 ㅠㅠ
<br>
<br>
<br>

# 3. 코드 원리

이번 코드에서는 메모리 공간을 최소로 하자라는 목표를 가졌습니다.
<br>
그 결과 동적할당을 통해 메모리 공간을 확보하였습니다.
<br>

```c
arr = (int *)malloc(sizeof(int) * N); //필요한 공간만큼만 확보
    for (int i = 0; i < N; i++) {
        scanf("%d", &arr[i]); //할당된 공간에 데이터 입력
    }
```

<br>
제 코드의 원리는 다음과 같습니다.
<br>
<br>

> **“목표값과 카드의 합이 <span style="color: red">최소</span>인 경우!** > **이를 정답이라고 볼 수 있다.”**

<br>
이와 같은 알고리즘을 구성하기 위하여 **_dif_** 라는 변수를 선언했으며,
<br>
차이를 최소로하는 값을 찾는 것이 목표였습니다.
<br>

<br>
```c
if (sum <= M) {
        if (dif == -1 || dif > M - sum) {
                dif = M - sum;
                result = sum;
        }
}
```
<br>
이를 위하여, 목표값인 ***M*** 보다는 작지만 차이값이 기존의 값보다는 큰 어떠한 값을 찾고자 하였습니다.
<br>
<br>

# 4. 소스코드 증명

```c
    for (int i = 0; i < N; i++) {
        for (int j = i+1; j < N; j++) {
            for (int k = j+1; k < N; k++) {
                sum = arr[i] + arr[j] + arr[k];
                if (sum <= M) {
                    if (dif == -1 || dif > M - sum) {
                        dif = M - sum;
                        result = sum;
                    }
                }
            }
        }
    }
```

1. sum

   > i, j, k 가 순차적으로 돌며, 카드를 선정하여 숫자를 합함
   > <br> j와 k의 제한값에 -1, -2를 붙일 순 있지만, 그 이전에 끝나기 때문에 필요없는 코드 삭제

2. if(sum <= M)

   > 세 카드의 합이 목표값인 M보다 작다면,
   > <br> 차이가 더 적은 결과가 존재할 가능성이 있으므로, 진행

3. if(dif == -1 || dif > M - sum)
   > dif == -1 **_(초기값)_** > <br>dif 가 현재의 차이값보다 크다면 바꿔야하므로
   > <br>dif = M - sum;
   > <br>result를 sum으로 변경

<br>
코드의 예시 출력 결과입니다.
<br>
<img src="/assets/image/black3.png" width="40%" title="출력 예시" alt="출력 예시"/>
<br>
<br>
<br>
<br>
<br>
자 이렇게, 세 번째 문제도 해결해보았습니다. ㅎㅎ
<br>
<br>
중첩된 for문을 사용하는 것을 병적으로 싫어하는 저로선,,, 참 불편했던 문제였습니다. ㅠㅠ
<br>
풀었지만 꽉 막힌 기분이 들어 별로 행복하진 않군요...
<br>
<br>
<br>
오늘은 고구마 하나를 물고.. 퇴근해보겠습니다.
<br>
기가 막힌 생각이 떠오를 때까지...
안뇽! ʕ•ﻌ•ʔ ♡

---
