---
layout: post
title: "[추석맞이 코딩챌린지①] 피보나치수"
date: 2021-09-19 19:30:35 +0900
categories: Algorithm
---

---

<span style="color:#5CD1E5">본 글은 네이버 카페 코뮤니티에서 주최한 코딩챌린지 참여 글입니다.</span>
<br>
Naver 카페 [코뮤니티][link]

[link]: https://cafe.naver.com/codeuniv/44736 "코뮤니티"

# 1. 피보나치 수열?

<br>
<img src="/assets/image/fibo.png" width="30%" title="피보나치 수열" alt="fibonacci"/>
<br>

피보나치 수는 0번째 인 0과 1번째인 숫자 1로 시작하게 되는 수열입니다.
<br>두 번째는 이 둘의 합인 1, 세 번째는 이 둘의 합인 숫자 2의 값을 가지게 되며, 이의 반복되는 형태라고 볼 수 있습니다.
<br>
위 수열의 조건은 다음과 같은 세 가지이다.
<br>
<br>
조건 1 : 입력받는 숫자 n은 2 이상의 자연수
<br>
조건 2 : n > 2인 피보나치 수에서, n번째 수 = (n - 2)번째 수 + (n - 1)번째 수
<br>
조건 3 : 피보나치 수열을 나열하면 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ...

​

## 어떤 알고리즘이 필요할까?

재귀함수

```c
#include <stdio.h>

void hello()
{
    printf("Hello, world!\n");

    hello();    // hello 함수 안에서 hello 함수 호출
}

int main()
{
    hello();    // hello 함수 최초 호출

    return 0;
}
```

다음과 같은 재귀함수가 피보나치 수열의 가장 기본적인 형태라고 볼 수 있습니다.
<br>
피보나치 수열을 얻을 수 있는 함수가 다음과 같이 존재한다고 할 때, 재귀를 통해 n-1, n-2 번째 피보나치 수열의 값을 얻게 됩니다.
<br>

```c
int fibo(int n)
{
    if(n<1)
    {
        return 0;
    }
    if ((n == 1) || (n == 2))
    {
        return 1;
    }
    return fibonacci(n - 2) + fibonacci(n - 1);
}
```

이 때의 빅오 계산 값을 결과는 O(2<sup>n</sup>) 이 됩니다.
<br>
다음과 같이 2의 제곱형태로 늘어나기 때문이죠!
<br>
<img src="/assets/image/fibo1.png" width="60%" title="피보나치 수열 예시" alt="fibonacci code"/>
<br>
즉, 2의 제곱형태로 계산이 늘어나고 있으며, 중복적인 계산이 이뤄지고 있음을 확인할 수 있습니다.
<br>
전체 계산은 노드의 높이에 따라 2<sup>n</sup> - 1 번 진행하게 되므로, 시간복잡도는 O(2<sup>n</sup> - 1) 입니다.
<br>
최종적으로, 빅오 계산법에 따라 O(2<sup>n</sup>)와 같으므로 시간복잡도는 O(2<sup>n</sup>)라고 볼 수 있습니다.

<br>
<br>
제가 원하는 코드는 이보다 훨씬 효율이 좋은 O(n)의 코드를 작성해보고자 합니다.
<br>
<br>

# 2. O(n)의 소스코드

위 코드는 제가 대학교에서 알고리즘 수업을 들으면서 연구한 코드입니다. :)
<br>
<span style="color:gray">3일간 열심히 고민하고 논문을 확인하며 최종적으로 얻은 코드</span>
<br>
코딩의 세계에 입문한지 얼마 되지 않은 시점에 작성한 코드지만, 처음으로 완성시킨 알고리즘이기도 합니다. ㅎㅎ..
<br>
(많은 추억이 담겨 애착이 가는 코드...)

```c
#include <stdlib.h>
#include <stdio.h>

int fibonacci(int n, int* numPtr);

int main(void){

        int num; //사용자에게 입력받을 정수값
        printf("\n 피보나치 수를 입력해주십시오. -> \t");
        scanf("%d",&num);
        printf("\n");

        int *numPtr = malloc(sizeof(int) * num); //정수형 크기 * 사용자가 입력한 크기만큼 동적 할당

        for(int i = 0; i < num; i++){
                *(numPtr+i) = 0; //배열 초기화
        }

        if(num == 1){
                printf(" %d번째 피보나치 수는 %d 입니다. \n",num,0);
        }//첫 번째 피보나치 수는 0으로 통일 & 피보나치 수는 1부터 시작한다고 가정
        else{
                fibonacci(num, numPtr); //fibonacci함수에 사용자의 입력값과 포인터를 인자로 전달
                printf(" %d번째 피보나치 수는 %d 입니다.\n",num, *(numPtr+(num-1)));
                //fibonacci로 부터 리턴받은 값을 출력
        }

        free(numPtr); //사용한 동적할당을 해제

        return 0;
}

int fibonacci(int n, int* numPtr){

        if(*(numPtr+(n-1)) != 0){
                return *(numPtr+(n-1));
        } //피보나치 수열 계산 수를 줄이기 위해 할당한 동적배열에 값이 있는 경우, 리턴

        else if(n == 3 || n == 2){
                *(numPtr+(n-1)) = 1;
                return *(numPtr+(n-1));
        } //재귀함수의 탈출 조건 (두번째와 세번째는 1로 통일된다.)

        else{
                *(numPtr+(n-1)) = fibonacci(n-1, numPtr) + fibonacci(n-2, numPtr);
                return *(numPtr+(n-1));
        } //재귀함수 구현

        //함수의 결과로는 fibonacci의 결과값을 저장하는 동적배열을 리턴한다.
}
```

<br>
상당히 복잡하죠..?
<br>
이런 쉬운 문제에 뭐하러 포인터를 쓰냐..! 라고 하는 분도 있겠지만, 과거 컴퓨터의 성능이 지금처럼 좋지 않았을 당시에는 시간복잡도와 공간복잡도를 줄이기 위해
많은 노력들을 거쳐왔고, 이에 알고리즘이 탄생하게 되었습니다.
<br>
<br>

> **우리가 할 일은 1의 복잡도라도 줄여 <span style="color:blue">성능</span>을 높이는 것**

<br>

이것이 개발하는 우리 스스로의 가치를 높이는 일 아닐까요? ㅎㅎ

<span style="color: gray; text-decoration : line-through">
ㅋㅋ.. 쓸데없는 멋진 척이었다.
</span>

<br>
<br>
# 3. 코드 원리

위 코드에 작성된 주석을 통해 확인할 수 있겠지만, 그림과 함께 상세하게 풀이해보겠습니다.
<br>

일반적인 재귀함수에서는 중복적인 계산 즉, **<span style="color:red">필요없는 계산</span>** 이 반복되며 시간복잡도가 늘어나고 있음을 확인할 수 있습니다.
<br>
<br>
이러한 중복적인 계산을 피하기 위해 Buffer 공간을 생성하고, 이 공간에 결과값을 저장하는 과정을 통해 중복 계산을 피할 수 있게 되는 것입니다.

```c
if(*(numPtr+(n-1)) != 0){
    return *(numPtr+(n-1));
}
```

<br>
위 코드를 통해 확인할 수 있습니다.
<br>
<br>
<br>
*"원하는 공간에 값이 존재하느냐? 값이 존재한다면 가져와라."*
<br>
<br>

기존의 재귀함수를 훨씬 아름답게 만들어 줄 수 있다는 의미가 되죠. :)
<br>
<br>

# 4. 소스코드 증명

```c
int fibonacci(int n, int* numPtr){

        if(*(numPtr+(n-1)) != 0){
                return *(numPtr+(n-1));
        } //피보나치 수열 계산 수를 줄이기 위해 할당한 동적배열에 값이 있는 경우, 리턴

        else if(n == 3 || n == 2){
                *(numPtr+(n-1)) = 1;
                return *(numPtr+(n-1));
        } //재귀함수의 탈출 조건 (두번째와 세번째는 1로 통일된다.)

        else{
                *(numPtr+(n-1)) = fibonacci(n-1, numPtr) + fibonacci(n-2, numPtr);
                return *(numPtr+(n-1));
        } //재귀함수 구현

        //함수의 결과로는 fibonacci의 결과값을 저장하는 동적배열을 리턴한다.
}
```

1. if

   > 배열에 값이 있는 경우 계산 과정을 거치지 않고 값을 바로 반환

2. else if

   > 피보나치 수열의 두 번째와 세 번째는 1로 통일되므로, 탈출
   > <br> <span style="color: gray">(필자는 피보나치 수열이 1부터 시작한다고 가정)</span>

3. else
   > 피보나치 수열의 계산된 값이 아직 배열에 저장되지 않은 상태라면, 계산을 진행하지 않은 것이므로, 재귀

<img src="/assets/image/fibo2.png" width="60%" title="피보나치 수열 예시" alt="fibonacci code"/>

위 그림을 통해 계산되는 과정을 살펴보면, 코드의 진행순서에 따라 좌측의 계산이 선행된다고 볼 수 있습니다.
<br>
선행된 계산을 통해 배열(\*numPtr)에 차례대로 저장되고, 재귀함수의 탈출조건인 fibo(2)와 fibo(3)을 거쳐 탈출하고 계산없이 곧바로 값을 반환합니다.
<br>
<br>
이후, 우측의 계산을 진행할 때, 좌측 트리에서 선행된 계산이 배열에 있으므로, 모든 값을 곧바로 반환하기 때문에, 시간복잡도는 O(n-2)라고 볼 수 있으며, 이는 빅오 계산법에 따라 O(n-2) = O(n)
<br>
<br>
결과적으로 시간복잡도가 **O(n)** 인 코드를 가지게 됩니다.
<br>
<br>
<br>
<br>
과거에 작성했던 코드를 이렇게 정리하게 될 기회가 와서 참 기쁩니다. ㅎㅎ
<br>
초심을 잃지 않으려고 노력하고 있으나, 처음처럼 고뇌하고 이를 즐기며 공부하는 것이 더더욱 어려워진 요즘입니다.
<br>
<br>
제 초심을 찾게 기회를 만들어준 코뮤니티에 감사드립니다.
<br>
<br>
그럼 안뇽! ʕ•ﻌ•ʔ ♡

---
